{
	"name": "RekrutacjaETL",
	"properties": {
		"activities": [
			{
				"name": "Wait1",
				"type": "Wait",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"waitTimeInSeconds": 1
				}
			},
			{
				"name": "ExtractTables",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "SelectExtract",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('SelectExtract').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "ExtractTablesDbr",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Shared/Extract/LoadData",
								"baseParameters": {
									"npFileName": {
										"value": "@{item().TableName}",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Databricks",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "SelectExtract",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "CreateDatabases",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT * FROM config.TablesToExtract",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ExtractConfig",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "CreateDatabases",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "Wait1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Shared/Common/CreateDatabases"
				},
				"linkedServiceName": {
					"referenceName": "Databricks",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Switch1",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "ExtractTables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@pipeline().parameters.Language",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "scala",
							"activities": [
								{
									"name": "CalculateAverageScoresScala",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Shared/Transform/CalculateAverageScores_Scala"
									},
									"linkedServiceName": {
										"referenceName": "Databricks",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "CalculateUtilisationScala",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Shared/Transform/CalculateUtilisation_Scala"
									},
									"linkedServiceName": {
										"referenceName": "Databricks",
										"type": "LinkedServiceReference"
									}
								}
							]
						},
						{
							"value": "sql",
							"activities": [
								{
									"name": "CalculateAverageScoresSql",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Shared/Transform/CalculateAverageScores_SparkSQL"
									},
									"linkedServiceName": {
										"referenceName": "Databricks",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "CalculateUtilisationSql",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Shared/Transform/CalculateUtilisation_SparkSQL"
									},
									"linkedServiceName": {
										"referenceName": "Databricks",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "SelectLoad",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Switch1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT * FROM config.TablesToLoad",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ExtractConfig",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "LoadTables",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "SelectLoad",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('SelectLoad').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "LoadTable",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Shared/Load/LoadTableToDb",
								"baseParameters": {
									"npTableName": {
										"value": "@{item().TableName}",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Databricks",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "SaveTableToBlob",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Shared/Load/SaveTableToBlob",
								"baseParameters": {
									"npTableName": {
										"value": "@{item().TableName}",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Databricks",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"Language": {
				"type": "string",
				"defaultValue": "scala"
			}
		},
		"annotations": [],
		"lastPublishTime": "2020-08-10T17:19:37Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}